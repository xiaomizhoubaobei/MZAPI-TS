name: Create Release with GPG Signature

on:
  pull_request:
    branches:
      - main
    types: [closed]
    paths:
      - 'src/**'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.sender.type != 'Bot'
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Audit - Workflow started
        run: |
          echo "Release workflow started for PR #${{ github.event.pull_request.number }}" >> audit.log
          echo "Triggered by: ${{ github.event.pull_request.user.login }}" >> audit.log
          echo "Commit SHA: ${{ github.sha }}" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Audit - Node.js setup completed
        run: |
          echo "Node.js setup completed" >> audit.log
          echo "Node version: $(node --version)" >> audit.log
          echo "NPM version: $(npm --version)" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Audit - Dependencies installed
        run: |
          echo "Dependencies installed" >> audit.log
          echo "Yarn version: $(yarn --version)" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Build project
        run: yarn run build

      - name: Audit - Project built
        run: |
          echo "Project built successfully" >> audit.log
          echo "Build timestamp: $(date -u)" >> audit.log

      - name: Install GPG
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg

      - name: Audit - GPG installed
        run: |
          echo "GPG installed" >> audit.log
          echo "GPG version: $(gpg --version | head -n 1)" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Audit - GPG key imported
        run: |
          echo "GPG key imported" >> audit.log
          echo "Key fingerprint: ${{ secrets.GPG_FINGERPRINT || 'Not available' }}" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Audit - Version retrieved
        run: |
          echo "Version retrieved from package.json" >> audit.log
          echo "Package version: ${{ steps.get_version.outputs.version }}" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Generate release notes
        uses: actions/github-script@v7
        id: release_notes
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const previousRelease = releases.length > 0 ? releases[0] : null;
            let changelog = "### 本次发布包含以下变更\n\n";
            
            if (previousRelease) {
              const { data: commits } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: previousRelease.tag_name,
                head: context.sha
              });
              
              const features = [];
              const fixes = [];
              const chores = [];
              
              for (const commit of commits.commits) {
                const message = commit.commit.message;
                if (message.startsWith('feat:')) {
                  features.push(message.substring(5).trim());
                } else if (message.startsWith('fix:')) {
                  fixes.push(message.substring(4).trim());
                } else if (message.startsWith('chore:')) {
                  chores.push(message.substring(6).trim());
                }
              }
              
              if (features.length > 0) {
                changelog += "### 新特性\n";
                features.forEach(f => changelog += `- ${f}\n`);
                changelog += "\n";
              }
              
              if (fixes.length > 0) {
                changelog += "### 修复\n";
                fixes.forEach(f => changelog += `- ${f}\n`);
                changelog += "\n";
              }
              
              if (chores.length > 0) {
                changelog += "### 其他\n";
                chores.forEach(c => changelog += `- ${c}\n`);
                changelog += "\n";
              }
              
              if (features.length === 0 && fixes.length === 0 && chores.length === 0) {
                changelog += "没有找到符合格式的提交记录\n";
              }
            } else {
              changelog += "这是首次发布\n";
            }
            
            core.setOutput('release_notes', changelog);
      - name: Audit - Release notes generated
        run: |
          echo "Release notes generated using GitHub API" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Create release archive
        run: |
          # 使用从 package.json 获取的版本号
          VERSION=${{ steps.get_version.outputs.version }}
          # 创建发布包
          tar -czf mzapi-ts-sdk-${VERSION}.tar.gz --exclude='.git' --exclude='.github' --exclude='node_modules' --exclude='dist' .
          
          # 审计日志 - 记录发布包创建
          echo "Release archive created" >> audit.log
          echo "Archive name: mzapi-ts-sdk-${VERSION}.tar.gz" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2.2.1
        with:
          name: 发布 ${{ github.ref }}
          body: |
            ## 此版本的变更

            ${{ steps.release_notes.outputs.release_notes }}

            ## GPG 签名验证
            所有发布资产均使用 GPG 签名。要验证签名：
            1. 下载 .asc 签名文件以及对应的发布资产
            2. 运行命令: `gpg --verify <签名文件> <资产文件>`

            签名应与指纹为以下值的公钥匹配: ${{ secrets.GPG_FINGERPRINT || '未提供' }}
          draft: false
          prerelease: false
          files: |
            mzapi-ts-sdk-${{ steps.get_version.outputs.version }}.tar.gz
            mzapi-ts-sdk-${{ steps.get_version.outputs.version }}.tar.gz.asc

      - name: Sign release assets
        run: |
          # 使用从 package.json 获取的版本号
          VERSION=${{ steps.get_version.outputs.version }}
          # 为发布资产创建GPG签名
          gpg --armor --detach-sign mzapi-ts-sdk-${VERSION}.tar.gz
          
          # 上传签名文件
          gh release upload ${VERSION} mzapi-ts-sdk-${VERSION}.tar.gz.asc
          
          # 审计日志 - 记录资产签名和上传
          echo "Release assets signed and uploaded" >> audit.log
          echo "Signed asset: mzapi-ts-sdk-${VERSION}.tar.gz.asc" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest build provenance
        id: attest
        uses: actions/attest-build-provenance@v3.0.0
        with:
          # 配置 attest-build-provenance 动作的参数
          # 指定构建证明文件的名称和路径
          # 指定要生成构建证明的文件
          subject-path: mzapi-ts-sdk-${{ steps.get_version.outputs.version }}.tar.gz
          # 上传构建证明文件到 GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Audit - Build provenance attested
        run: |
          echo "Build provenance attested" >> audit.log
          echo "Subject path: mzapi-ts-sdk-${{ steps.get_version.outputs.version }}.tar.gz" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log

      - name: Update GitHub Release with attestation details
        run: |
          # 读取构建证明文件中的详细信息
          ATTESTATION_URL=$(jq -r '.attestation_url' build-provenance.json)
          BUNDLE_PATH=$(jq -r '.bundle_path' build-provenance.json)
          # 更新 Release 描述
          gh release edit ${GITHUB_REF} --body "
          ## 此版本的变更

          ${{ steps.release_notes.outputs.release_notes }}

          ## GPG 签名验证
          所有发布资产均使用 GPG 签名。要验证签名：
          1. 下载 .asc 签名文件以及对应的发布资产
          2. 运行命令: \`gpg --verify <签名文件> <资产文件>\`

          签名应与指纹为以下值的公钥匹配: ${{ secrets.GPG_FINGERPRINT || '未提供' }}

          ## 构建证明
          - **证明 URL**: $ATTESTATION_URL
          - **证明文件路径**: $BUNDLE_PATH
          "
          
          # 审计日志 - 记录Release更新
          echo "GitHub Release updated with attestation details" >> audit.log
          echo "Attestation URL: $ATTESTATION_URL" >> audit.log
          echo "Bundle path: $BUNDLE_PATH" >> audit.log
          echo "Timestamp: $(date -u)" >> audit.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload audit log
        uses: actions/upload-artifact@v4
        with:
          name: release-audit-log
          path: audit.log
          retention-days: 30